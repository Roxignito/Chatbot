{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30664,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from transformers import AutoModelForCausalLM, AutoTokenizer\nimport torch\n\nclass ChatBot:\n    def __init__(self, model_name):\n        self.tokenizer = AutoTokenizer.from_pretrained(model_name)\n        self.model = AutoModelForCausalLM.from_pretrained(model_name)\n\n    def chat(self, user_input):\n        input_ids = self.tokenizer.encode(user_input, return_tensors='pt')\n        chatbot_output = self.model.generate(input_ids, max_length=1000, pad_token_id=self.tokenizer.eos_token_id)\n        response = self.tokenizer.decode(chatbot_output[0], skip_special_tokens=True)\n        return response\n\n# Example usage:\nbot = ChatBot(\"microsoft/DialoGPT-medium\")\nwhile True:\n    user_input = input(\"You: \")\n    if user_input.lower() == 'exit':\n        print(\"Chat ended.\")\n        break\n    response = bot.chat(user_input)\n    print(\"ChatBot:\", response)\n","metadata":{"execution":{"iopub.status.busy":"2024-03-01T15:47:47.708703Z","iopub.execute_input":"2024-03-01T15:47:47.709155Z"},"trusted":true},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdin","text":"You:  Hi\n"},{"name":"stdout","text":"ChatBot: Hi and welcome to the party!\n","output_type":"stream"}]}]}